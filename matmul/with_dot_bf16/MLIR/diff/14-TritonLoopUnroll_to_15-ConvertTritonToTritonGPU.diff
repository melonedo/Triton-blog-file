--- matmul/with_dot_bf16/MLIR/14-TritonLoopUnroll.mlir
+++ matmul/with_dot_bf16/MLIR/15-ConvertTritonToTritonGPU.mlir
@@ -1,80 +1,103 @@
 
+#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
+#blocked1 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
+#blocked2 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
+#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
+#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
+#blocked5 = #ttg.blocked<{sizePerThread = [4, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
 #loc = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0)
-module {
+module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
   tt.func public @matrix_multiplication_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0)) attributes {noinline = false} {
     %c63_i32 = arith.constant 63 : i32 loc(#loc1)
-    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xbf16> loc(#loc1)
-    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xbf16> loc(#loc1)
+    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xbf16, #blocked> loc(#loc1)
+    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xbf16, #blocked> loc(#loc1)
     %c1_i32 = arith.constant 1 : i32 loc(#loc1)
     %c0_i32 = arith.constant 0 : i32 loc(#loc1)
-    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf32> loc(#loc1)
+    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked> loc(#loc1)
     %c64_i32 = arith.constant 64 : i32 loc(#loc1)
     %c128_i32 = arith.constant 128 : i32 loc(#loc1)
     %0 = tt.get_program_id x : i32 loc(#loc2)
     %1 = tt.get_program_id y : i32 loc(#loc3)
     %2 = arith.muli %1, %c128_i32 : i32 loc(#loc4)
-    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc5)
-    %4 = tt.splat %2 : i32 -> tensor<128xi32> loc(#loc6)
-    %5 = arith.addi %4, %3 : tensor<128xi32> loc(#loc6)
+    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked1> loc(#loc5)
+    %4 = tt.splat %2 : i32 -> tensor<128xi32, #blocked1> loc(#loc6)
+    %5 = arith.addi %4, %3 : tensor<128xi32, #blocked1> loc(#loc6)
     %6 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
-    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
-    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
-    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
-    %10 = tt.expand_dims %5 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc10)
-    %11 = tt.splat %arg6 : i32 -> tensor<128x1xi32> loc(#loc11)
-    %12 = arith.muli %10, %11 : tensor<128x1xi32> loc(#loc11)
-    %13 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc12)
-    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc12)
-    %15 = tt.expand_dims %7 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc13)
-    %16 = tt.broadcast %14 : tensor<128x1x!tt.ptr<bf16>> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc14)
-    %17 = tt.broadcast %15 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc14)
-    %18 = tt.addptr %16, %17 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc14)
-    %19 = tt.expand_dims %7 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc15)
-    %20 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc16)
-    %21 = arith.muli %19, %20 : tensor<64x1xi32> loc(#loc16)
-    %22 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc17)
-    %23 = tt.addptr %22, %21 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc17)
-    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc18)
-    %25 = tt.broadcast %23 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x64x!tt.ptr<bf16>> loc(#loc19)
-    %26 = tt.broadcast %24 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc19)
-    %27 = tt.addptr %25, %26 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc19)
-    %28 = arith.addi %arg5, %c63_i32 : i32 loc(#loc43)
-    %29 = arith.divsi %28, %c64_i32 : i32 loc(#loc44)
-    %30 = scf.for %arg9 = %c0_i32 to %29 step %c1_i32 iter_args(%arg10 = %cst_1) -> (tensor<128x64xf32>)  : i32 {
-      %45 = arith.muli %arg9, %c64_i32 : i32 loc(#loc24)
-      %46 = arith.subi %arg5, %45 : i32 loc(#loc25)
-      %47 = tt.splat %46 : i32 -> tensor<1x64xi32> loc(#loc26)
-      %48 = arith.cmpi slt, %15, %47 : tensor<1x64xi32> loc(#loc26)
-      %49 = tt.splat %45 : i32 -> tensor<128x64xi32> loc(#loc27)
-      %50 = tt.addptr %18, %49 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc27)
-      %51 = tt.broadcast %48 : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc28)
-      %52 = tt.load %50, %51, %cst_0 : tensor<128x64x!tt.ptr<bf16>> loc(#loc28)
-      %53 = tt.splat %46 : i32 -> tensor<64x1xi32> loc(#loc29)
-      %54 = arith.cmpi slt, %19, %53 : tensor<64x1xi32> loc(#loc29)
-      %55 = arith.muli %45, %arg7 : i32 loc(#loc30)
-      %56 = tt.splat %55 : i32 -> tensor<64x64xi32> loc(#loc31)
-      %57 = tt.addptr %27, %56 : tensor<64x64x!tt.ptr<bf16>>, tensor<64x64xi32> loc(#loc31)
-      %58 = tt.broadcast %54 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc32)
-      %59 = tt.load %57, %58, %cst : tensor<64x64x!tt.ptr<bf16>> loc(#loc32)
-      %60 = tt.dot %52, %59, %arg10, inputPrecision = tf32 : tensor<128x64xbf16> * tensor<64x64xbf16> -> tensor<128x64xf32> loc(#loc33)
-      scf.yield %60 : tensor<128x64xf32> loc(#loc34)
+    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked1> loc(#loc8)
+    %8 = tt.splat %6 : i32 -> tensor<64xi32, #blocked1> loc(#loc9)
+    %9 = arith.addi %8, %7 : tensor<64xi32, #blocked1> loc(#loc9)
+    %10 = ttg.convert_layout %5 : tensor<128xi32, #blocked1> -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc10)
+    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc10)
+    %12 = ttg.convert_layout %11 : tensor<128x1xi32, #blocked2> -> tensor<128x1xi32, #blocked3> loc(#loc11)
+    %13 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked3> loc(#loc11)
+    %14 = arith.muli %12, %13 : tensor<128x1xi32, #blocked3> loc(#loc11)
+    %15 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>, #blocked3> loc(#loc12)
+    %16 = tt.addptr %15, %14 : tensor<128x1x!tt.ptr<bf16>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc12)
+    %17 = ttg.convert_layout %7 : tensor<64xi32, #blocked1> -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc13)
+    %18 = tt.expand_dims %17 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x64xi32, #blocked4> loc(#loc13)
+    %19 = ttg.convert_layout %18 : tensor<1x64xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc14)
+    %20 = tt.broadcast %16 : tensor<128x1x!tt.ptr<bf16>, #blocked3> -> tensor<128x64x!tt.ptr<bf16>, #blocked3> loc(#loc14)
+    %21 = ttg.convert_layout %20 : tensor<128x64x!tt.ptr<bf16>, #blocked3> -> tensor<128x64x!tt.ptr<bf16>, #blocked> loc(#loc14)
+    %22 = tt.broadcast %19 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc14)
+    %23 = tt.addptr %21, %22 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc14)
+    %24 = ttg.convert_layout %7 : tensor<64xi32, #blocked1> -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc15)
+    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc15)
+    %26 = ttg.convert_layout %25 : tensor<64x1xi32, #blocked2> -> tensor<64x1xi32, #blocked3> loc(#loc16)
+    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked3> loc(#loc16)
+    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked3> loc(#loc16)
+    %29 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked3> loc(#loc17)
+    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked3>, tensor<64x1xi32, #blocked3> loc(#loc17)
+    %31 = ttg.convert_layout %9 : tensor<64xi32, #blocked1> -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc18)
+    %32 = tt.expand_dims %31 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x64xi32, #blocked4> loc(#loc18)
+    %33 = ttg.convert_layout %32 : tensor<1x64xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc19)
+    %34 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked3> -> tensor<64x64x!tt.ptr<bf16>, #blocked3> loc(#loc19)
+    %35 = ttg.convert_layout %34 : tensor<64x64x!tt.ptr<bf16>, #blocked3> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc19)
+    %36 = tt.broadcast %33 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
+    %37 = tt.addptr %35, %36 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc19)
+    %38 = arith.addi %arg5, %c63_i32 : i32 loc(#loc44)
+    %39 = arith.divsi %38, %c64_i32 : i32 loc(#loc45)
+    %40 = scf.for %arg9 = %c0_i32 to %39 step %c1_i32 iter_args(%arg10 = %cst_1) -> (tensor<128x64xf32, #blocked>)  : i32 {
+      %57 = arith.muli %arg9, %c64_i32 : i32 loc(#loc24)
+      %58 = arith.subi %arg5, %57 : i32 loc(#loc25)
+      %59 = tt.splat %58 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
+      %60 = arith.cmpi slt, %19, %59 : tensor<1x64xi32, #blocked> loc(#loc26)
+      %61 = tt.splat %57 : i32 -> tensor<128x64xi32, #blocked> loc(#loc27)
+      %62 = tt.addptr %23, %61 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc27)
+      %63 = tt.broadcast %60 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc28)
+      %64 = tt.load %62, %63, %cst_0 : tensor<128x64x!tt.ptr<bf16>, #blocked> loc(#loc28)
+      %65 = tt.splat %58 : i32 -> tensor<64x1xi32, #blocked3> loc(#loc29)
+      %66 = arith.cmpi slt, %26, %65 : tensor<64x1xi32, #blocked3> loc(#loc29)
+      %67 = arith.muli %57, %arg7 : i32 loc(#loc30)
+      %68 = tt.splat %67 : i32 -> tensor<64x64xi32, #blocked> loc(#loc31)
+      %69 = tt.addptr %37, %68 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
+      %70 = tt.broadcast %66 : tensor<64x1xi1, #blocked3> -> tensor<64x64xi1, #blocked3> loc(#loc32)
+      %71 = ttg.convert_layout %70 : tensor<64x64xi1, #blocked3> -> tensor<64x64xi1, #blocked> loc(#loc32)
+      %72 = tt.load %69, %71, %cst : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc32)
+      %73 = ttg.convert_layout %64 : tensor<128x64xbf16, #blocked> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked5}>> loc(#loc28)
+      %74 = ttg.convert_layout %72 : tensor<64x64xbf16, #blocked> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked5}>> loc(#loc32)
+      %75 = ttg.convert_layout %arg10 : tensor<128x64xf32, #blocked> -> tensor<128x64xf32, #blocked5> loc(#loc33)
+      %76 = tt.dot %73, %74, %75, inputPrecision = tf32 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked5}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked5}>> -> tensor<128x64xf32, #blocked5> loc(#loc34)
+      %77 = ttg.convert_layout %76 : tensor<128x64xf32, #blocked5> -> tensor<128x64xf32, #blocked> loc(#loc35)
+      scf.yield %77 : tensor<128x64xf32, #blocked> loc(#loc35)
     } loc(#loc23)
-    %31 = tt.splat %arg8 : i32 -> tensor<128x1xi32> loc(#loc35)
-    %32 = arith.muli %10, %31 : tensor<128x1xi32> loc(#loc35)
-    %33 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>> loc(#loc36)
-    %34 = tt.addptr %33, %32 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc36)
-    %35 = tt.broadcast %34 : tensor<128x1x!tt.ptr<f32>> -> tensor<128x64x!tt.ptr<f32>> loc(#loc37)
-    %36 = tt.broadcast %24 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc37)
-    %37 = tt.addptr %35, %36 : tensor<128x64x!tt.ptr<f32>>, tensor<128x64xi32> loc(#loc37)
-    %38 = tt.splat %arg3 : i32 -> tensor<128x1xi32> loc(#loc38)
-    %39 = arith.cmpi slt, %10, %38 : tensor<128x1xi32> loc(#loc38)
-    %40 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc39)
-    %41 = arith.cmpi slt, %24, %40 : tensor<1x64xi32> loc(#loc39)
-    %42 = tt.broadcast %39 : tensor<128x1xi1> -> tensor<128x64xi1> loc(#loc40)
-    %43 = tt.broadcast %41 : tensor<1x64xi1> -> tensor<128x64xi1> loc(#loc40)
-    %44 = arith.andi %42, %43 : tensor<128x64xi1> loc(#loc40)
-    tt.store %37, %30, %44 : tensor<128x64x!tt.ptr<f32>> loc(#loc41)
-    tt.return loc(#loc42)
+    %41 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked3> loc(#loc36)
+    %42 = arith.muli %12, %41 : tensor<128x1xi32, #blocked3> loc(#loc36)
+    %43 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked3> loc(#loc37)
+    %44 = tt.addptr %43, %42 : tensor<128x1x!tt.ptr<f32>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc37)
+    %45 = tt.broadcast %44 : tensor<128x1x!tt.ptr<f32>, #blocked3> -> tensor<128x64x!tt.ptr<f32>, #blocked3> loc(#loc38)
+    %46 = ttg.convert_layout %45 : tensor<128x64x!tt.ptr<f32>, #blocked3> -> tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc38)
+    %47 = tt.broadcast %33 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc38)
+    %48 = tt.addptr %46, %47 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc38)
+    %49 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked3> loc(#loc39)
+    %50 = arith.cmpi slt, %12, %49 : tensor<128x1xi32, #blocked3> loc(#loc39)
+    %51 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked> loc(#loc40)
+    %52 = arith.cmpi slt, %33, %51 : tensor<1x64xi32, #blocked> loc(#loc40)
+    %53 = tt.broadcast %50 : tensor<128x1xi1, #blocked3> -> tensor<128x64xi1, #blocked3> loc(#loc41)
+    %54 = ttg.convert_layout %53 : tensor<128x64xi1, #blocked3> -> tensor<128x64xi1, #blocked> loc(#loc41)
+    %55 = tt.broadcast %52 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc41)
+    %56 = arith.andi %54, %55 : tensor<128x64xi1, #blocked> loc(#loc41)
+    tt.store %48, %40, %56 : tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc42)
+    tt.return loc(#loc43)
   } loc(#loc)
 } loc(#loc)
 #loc1 = loc(unknown)
@@ -109,15 +132,16 @@
 #loc30 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:48)
 #loc31 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:29)
 #loc32 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:20)
-#loc33 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":38:33)
-#loc34 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":38:8)
-#loc35 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:39)
-#loc36 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:21)
-#loc37 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:51)
-#loc38 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:33)
-#loc39 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:58)
-#loc40 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:39)
-#loc41 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:21)
-#loc42 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:4)
-#loc43 = loc(callsite(#loc20 at #loc21))
-#loc44 = loc(callsite(#loc22 at #loc21))
+#loc33 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":29:27)
+#loc34 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":38:33)
+#loc35 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":38:8)
+#loc36 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:39)
+#loc37 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:21)
+#loc38 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:51)
+#loc39 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:33)
+#loc40 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:58)
+#loc41 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:39)
+#loc42 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:21)
+#loc43 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:4)
+#loc44 = loc(callsite(#loc20 at #loc21))
+#loc45 = loc(callsite(#loc22 at #loc21))
