--- matmul/with_dot_bf16/MLIR/34-TritonGPUScheduleLoops.mlir
+++ matmul/with_dot_bf16/MLIR/35-TritonGPUPipeline.mlir
@@ -3,16 +3,21 @@
 #blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
 #loc = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0)
 #mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 8]}>
+#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
+#smem = #ttg.shared_memory
 module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
   tt.func public @matrix_multiplication_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0)) attributes {noinline = false} {
-    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xbf16, #blocked> loc(#loc1)
-    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xbf16, #blocked> loc(#loc1)
+    %cst = arith.constant dense<64> : tensor<128x64xi32, #blocked> loc(#loc1)
+    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
+    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
+    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xbf16, #blocked> loc(#loc1)
+    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xbf16, #blocked> loc(#loc1)
     %c128_i32 = arith.constant 128 : i32 loc(#loc1)
     %c64_i32 = arith.constant 64 : i32 loc(#loc1)
     %c63_i32 = arith.constant 63 : i32 loc(#loc1)
     %c1_i32 = arith.constant 1 : i32 loc(#loc1)
     %c0_i32 = arith.constant 0 : i32 loc(#loc1)
-    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
+    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
     %0 = tt.get_program_id x : i32 loc(#loc2)
     %1 = tt.get_program_id y : i32 loc(#loc3)
     %2 = arith.muli %1, %c128_i32 : i32 loc(#loc4)
@@ -50,46 +55,112 @@
     %34 = tt.broadcast %31 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc19)
     %35 = tt.broadcast %32 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
     %36 = tt.addptr %34, %35 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc19)
-    %37 = arith.addi %arg5, %c63_i32 : i32 loc(#loc43)
-    %38 = arith.divsi %37, %c64_i32 : i32 loc(#loc44)
-    %39 = scf.for %arg9 = %c0_i32 to %38 step %c1_i32 iter_args(%arg10 = %cst_1) -> (tensor<128x64xf32, #mma>)  : i32 {
-      %55 = arith.muli %arg9, %c64_i32 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : i32 loc(#loc24)
-      %56 = arith.subi %arg5, %55 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : i32 loc(#loc25)
-      %57 = tt.splat %56 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
-      %58 = arith.cmpi slt, %22, %57 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : tensor<1x64xi32, #blocked> loc(#loc26)
-      %59 = tt.splat %55 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : i32 -> tensor<128x64xi32, #blocked> loc(#loc27)
-      %60 = tt.addptr %25, %59 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc27)
-      %61 = tt.broadcast %58 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc28)
-      %62 = tt.load %60, %61, %cst_0 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : tensor<128x64x!tt.ptr<bf16>, #blocked> loc(#loc28)
-      %63 = tt.splat %56 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : i32 -> tensor<64x1xi32, #blocked> loc(#loc29)
-      %64 = arith.cmpi slt, %27, %63 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : tensor<64x1xi32, #blocked> loc(#loc29)
-      %65 = arith.muli %55, %arg7 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : i32 loc(#loc30)
-      %66 = tt.splat %65 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : i32 -> tensor<64x64xi32, #blocked> loc(#loc31)
-      %67 = tt.addptr %36, %66 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
-      %68 = tt.broadcast %64 {loop.cluster = 2 : i32, loop.stage = 0 : i32} : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc32)
-      %69 = tt.load %67, %68, %cst {loop.cluster = 2 : i32, loop.stage = 0 : i32} : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc32)
-      %70 = ttg.convert_layout %62 {loop.cluster = 0 : i32, loop.stage = 2 : i32} : tensor<128x64xbf16, #blocked> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc28)
-      %71 = ttg.convert_layout %69 {loop.cluster = 0 : i32, loop.stage = 2 : i32} : tensor<64x64xbf16, #blocked> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc32)
-      %72 = tt.dot %70, %71, %arg10, inputPrecision = tf32 {loop.cluster = 0 : i32, loop.stage = 2 : i32} : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<128x64xf32, #mma> loc(#loc33)
-      scf.yield %72 : tensor<128x64xf32, #mma> loc(#loc34)
-    } {tt.scheduled_max_stage = 2 : i32} loc(#loc23)
-    %40 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc35)
-    %41 = arith.muli %17, %40 : tensor<128x1xi32, #blocked1> loc(#loc35)
-    %42 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
-    %43 = tt.addptr %42, %41 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc36)
-    %44 = tt.broadcast %43 : tensor<128x1x!tt.ptr<f32>, #blocked1> -> tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc37)
-    %45 = tt.broadcast %33 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc37)
-    %46 = tt.addptr %44, %45 : tensor<128x64x!tt.ptr<f32>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc37)
-    %47 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc38)
-    %48 = arith.cmpi slt, %17, %47 : tensor<128x1xi32, #blocked1> loc(#loc38)
-    %49 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc39)
-    %50 = arith.cmpi slt, %33, %49 : tensor<1x64xi32, #blocked1> loc(#loc39)
-    %51 = tt.broadcast %48 : tensor<128x1xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc40)
-    %52 = tt.broadcast %50 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc40)
-    %53 = arith.andi %51, %52 : tensor<128x64xi1, #blocked1> loc(#loc40)
-    %54 = ttg.convert_layout %39 : tensor<128x64xf32, #mma> -> tensor<128x64xf32, #blocked1> loc(#loc41)
-    tt.store %46, %54, %53 : tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc41)
-    tt.return loc(#loc42)
+    %37 = arith.addi %arg5, %c63_i32 : i32 loc(#loc42)
+    %38 = arith.divsi %37, %c64_i32 : i32 loc(#loc43)
+    %39 = ttg.local_alloc : () -> !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(#loc23)
+    %40 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc24)
+    %41 = arith.cmpi sgt, %38, %c0_i32 : i32 loc(#loc25)
+    %42 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
+    %43 = arith.cmpi slt, %22, %42 : tensor<1x64xi32, #blocked> loc(#loc26)
+    %44 = tt.broadcast %43 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
+    %45 = ttg.memdesc_subview %39[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
+    %46 = tt.splat %41 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
+    %47 = arith.andi %46, %44 : tensor<128x64xi1, #blocked> loc(#loc25)
+    %48 = ttg.async_copy_global_to_local %25, %45 mask %47 other %cst_1 : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
+    %49 = ttg.async_commit_group %48 loc(#loc23)
+    %50 = tt.splat %arg5 : i32 -> tensor<64x1xi32, #blocked> loc(#loc27)
+    %51 = arith.cmpi slt, %27, %50 : tensor<64x1xi32, #blocked> loc(#loc27)
+    %52 = tt.broadcast %51 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
+    %53 = ttg.memdesc_subview %40[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
+    %54 = tt.splat %41 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
+    %55 = arith.andi %54, %52 : tensor<64x64xi1, #blocked> loc(#loc25)
+    %56 = ttg.async_copy_global_to_local %36, %53 mask %55 other %cst_0 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
+    %57 = ttg.async_commit_group %56 loc(#loc24)
+    %58 = arith.cmpi sgt, %38, %c1_i32 : i32 loc(#loc25)
+    %59 = arith.subi %arg5, %c64_i32 : i32 loc(#loc28)
+    %60 = tt.splat %59 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
+    %61 = arith.cmpi slt, %22, %60 : tensor<1x64xi32, #blocked> loc(#loc26)
+    %62 = tt.addptr %25, %cst : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc29)
+    %63 = tt.broadcast %61 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
+    %64 = ttg.memdesc_subview %39[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
+    %65 = tt.splat %58 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
+    %66 = arith.andi %65, %63 : tensor<128x64xi1, #blocked> loc(#loc25)
+    %67 = ttg.async_copy_global_to_local %62, %64 mask %66 other %cst_1 : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
+    %68 = ttg.async_commit_group %67 loc(#loc23)
+    %69 = tt.splat %59 : i32 -> tensor<64x1xi32, #blocked> loc(#loc27)
+    %70 = arith.cmpi slt, %27, %69 : tensor<64x1xi32, #blocked> loc(#loc27)
+    %71 = arith.muli %arg7, %c64_i32 : i32 loc(#loc30)
+    %72 = tt.splat %71 : i32 -> tensor<64x64xi32, #blocked> loc(#loc31)
+    %73 = tt.addptr %36, %72 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
+    %74 = tt.broadcast %70 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
+    %75 = ttg.memdesc_subview %40[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
+    %76 = tt.splat %58 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
+    %77 = arith.andi %76, %74 : tensor<64x64xi1, #blocked> loc(#loc25)
+    %78 = ttg.async_copy_global_to_local %73, %75 mask %77 other %cst_0 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
+    %79 = ttg.async_commit_group %78 loc(#loc24)
+    %80:9 = scf.for %arg9 = %c0_i32 to %38 step %c1_i32 iter_args(%arg10 = %cst_2, %arg11 = %c1_i32, %arg12 = %c-1_i32, %arg13 = %c2_i32, %arg14 = %c2_i32, %arg15 = %49, %arg16 = %68, %arg17 = %57, %arg18 = %79) -> (tensor<128x64xf32, #mma>, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
+      %97 = arith.subi %38, %c2_i32 : i32 loc(#loc25)
+      %98 = arith.cmpi slt, %arg9, %97 : i32 loc(#loc25)
+      %99 = arith.addi %arg12, %c1_i32 : i32 loc(#loc25)
+      %100 = arith.cmpi sge, %99, %arg13 : i32 loc(#loc25)
+      %101 = arith.select %100, %c0_i32, %99 : i32 loc(#loc25)
+      %102 = ttg.async_wait %arg15, %arg17 {num = 2 : i32} loc(#loc23)
+      %103 = ttg.memdesc_subview %39[%101, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
+      %104 = ttg.local_load %103 token %102 : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> -> tensor<128x64xbf16, #blocked> loc(#loc23)
+      %105 = ttg.memdesc_subview %40[%101, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
+      %106 = ttg.local_load %105 token %102 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #blocked> loc(#loc24)
+      %107 = ttg.convert_layout %104 : tensor<128x64xbf16, #blocked> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc23)
+      %108 = ttg.convert_layout %106 : tensor<64x64xbf16, #blocked> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc24)
+      %109 = tt.dot %107, %108, %arg10, inputPrecision = tf32 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<128x64xf32, #mma> loc(#loc32)
+      %110 = arith.addi %arg11, %c1_i32 : i32 loc(#loc25)
+      %111 = arith.cmpi sge, %110, %c2_i32 : i32 loc(#loc25)
+      %112 = arith.select %111, %c0_i32, %110 : i32 loc(#loc25)
+      %113 = arith.addi %arg9, %c2_i32 : i32 loc(#loc25)
+      %114 = arith.muli %113, %c64_i32 : i32 loc(#loc33)
+      %115 = arith.subi %arg5, %114 : i32 loc(#loc28)
+      %116 = tt.splat %115 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
+      %117 = arith.cmpi slt, %22, %116 : tensor<1x64xi32, #blocked> loc(#loc26)
+      %118 = tt.splat %114 : i32 -> tensor<128x64xi32, #blocked> loc(#loc29)
+      %119 = tt.addptr %25, %118 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc29)
+      %120 = tt.broadcast %117 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
+      %121 = ttg.memdesc_subview %39[%112, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
+      %122 = tt.splat %98 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
+      %123 = arith.andi %122, %120 : tensor<128x64xi1, #blocked> loc(#loc25)
+      %124 = ttg.async_copy_global_to_local %119, %121 mask %123 other %cst_1 : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
+      %125 = ttg.async_commit_group %124 loc(#loc23)
+      %126 = tt.splat %115 : i32 -> tensor<64x1xi32, #blocked> loc(#loc27)
+      %127 = arith.cmpi slt, %27, %126 : tensor<64x1xi32, #blocked> loc(#loc27)
+      %128 = arith.muli %114, %arg7 : i32 loc(#loc30)
+      %129 = tt.splat %128 : i32 -> tensor<64x64xi32, #blocked> loc(#loc31)
+      %130 = tt.addptr %36, %129 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
+      %131 = tt.broadcast %127 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
+      %132 = ttg.memdesc_subview %40[%112, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
+      %133 = tt.splat %98 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
+      %134 = arith.andi %133, %131 : tensor<64x64xi1, #blocked> loc(#loc25)
+      %135 = ttg.async_copy_global_to_local %130, %132 mask %134 other %cst_0 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
+      %136 = ttg.async_commit_group %135 loc(#loc24)
+      scf.yield %109, %112, %101, %arg14, %c2_i32, %arg16, %125, %arg18, %136 : tensor<128x64xf32, #mma>, i32, i32, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc25)
+    } loc(#loc25)
+    %81 = ttg.async_wait  {num = 0 : i32} loc(#loc25)
+    ttg.local_dealloc %40 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc25)
+    ttg.local_dealloc %39 : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(#loc25)
+    %82 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc34)
+    %83 = arith.muli %17, %82 : tensor<128x1xi32, #blocked1> loc(#loc34)
+    %84 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
+    %85 = tt.addptr %84, %83 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc35)
+    %86 = tt.broadcast %85 : tensor<128x1x!tt.ptr<f32>, #blocked1> -> tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
+    %87 = tt.broadcast %33 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc36)
+    %88 = tt.addptr %86, %87 : tensor<128x64x!tt.ptr<f32>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc36)
+    %89 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc37)
+    %90 = arith.cmpi slt, %17, %89 : tensor<128x1xi32, #blocked1> loc(#loc37)
+    %91 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
+    %92 = arith.cmpi slt, %33, %91 : tensor<1x64xi32, #blocked1> loc(#loc38)
+    %93 = tt.broadcast %90 : tensor<128x1xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc39)
+    %94 = tt.broadcast %92 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc39)
+    %95 = arith.andi %93, %94 : tensor<128x64xi1, #blocked1> loc(#loc39)
+    %96 = ttg.convert_layout %80#0 : tensor<128x64xf32, #mma> -> tensor<128x64xf32, #blocked1> loc(#loc40)
+    tt.store %88, %96, %95 : tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc40)
+    tt.return loc(#loc41)
   } loc(#loc)
 } loc(#loc)
 #loc1 = loc(unknown)
@@ -114,25 +185,24 @@
 #loc20 = loc("/workspace/Triton-blog-file/.venv/lib/python3.10/site-packages/triton/language/standard.py":40:22)
 #loc21 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":32:33)
 #loc22 = loc("/workspace/Triton-blog-file/.venv/lib/python3.10/site-packages/triton/language/standard.py":40:28)
-#loc23 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":32:22)
-#loc24 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":33:26)
-#loc25 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":33:22)
+#loc23 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":35:20)
+#loc24 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:20)
+#loc25 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":32:22)
 #loc26 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":35:82)
-#loc27 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":35:29)
-#loc28 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":35:20)
-#loc29 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:82)
+#loc27 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:82)
+#loc28 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":33:22)
+#loc29 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":35:29)
 #loc30 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:48)
 #loc31 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:29)
-#loc32 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:20)
-#loc33 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":38:33)
-#loc34 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":38:8)
-#loc35 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:39)
-#loc36 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:21)
-#loc37 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:51)
-#loc38 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:33)
-#loc39 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:58)
-#loc40 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:39)
-#loc41 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:21)
-#loc42 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:4)
-#loc43 = loc(callsite(#loc20 at #loc21))
-#loc44 = loc(callsite(#loc22 at #loc21))
+#loc32 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":38:33)
+#loc33 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":33:26)
+#loc34 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:39)
+#loc35 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:21)
+#loc36 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:51)
+#loc37 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:33)
+#loc38 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:58)
+#loc39 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:39)
+#loc40 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:21)
+#loc41 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:4)
+#loc42 = loc(callsite(#loc20 at #loc21))
+#loc43 = loc(callsite(#loc22 at #loc21))
