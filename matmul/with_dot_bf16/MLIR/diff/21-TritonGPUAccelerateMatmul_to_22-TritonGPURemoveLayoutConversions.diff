--- matmul/with_dot_bf16/MLIR/21-TritonGPUAccelerateMatmul.mlir
+++ matmul/with_dot_bf16/MLIR/22-TritonGPURemoveLayoutConversions.mlir
@@ -1,7 +1,6 @@
 
 #blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
-#blocked1 = #ttg.blocked<{sizePerThread = [4, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
-#blocked2 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
+#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
 #loc = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0)
 #mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 8]}>
 module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
@@ -13,25 +12,25 @@
     %c63_i32 = arith.constant 63 : i32 loc(#loc1)
     %c1_i32 = arith.constant 1 : i32 loc(#loc1)
     %c0_i32 = arith.constant 0 : i32 loc(#loc1)
-    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #blocked1> loc(#loc1)
+    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
     %0 = tt.get_program_id x : i32 loc(#loc2)
     %1 = tt.get_program_id y : i32 loc(#loc3)
     %2 = arith.muli %1, %c128_i32 : i32 loc(#loc4)
     %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
-    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc5)
+    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
     %5 = tt.splat %2 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
-    %6 = tt.splat %2 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
+    %6 = tt.splat %2 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
     %7 = arith.addi %5, %3 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
-    %8 = arith.addi %6, %4 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
+    %8 = arith.addi %6, %4 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
     %9 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
     %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
-    %11 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc8)
+    %11 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
     %12 = tt.splat %9 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
-    %13 = tt.splat %9 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
+    %13 = tt.splat %9 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
     %14 = arith.addi %12, %10 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
-    %15 = arith.addi %13, %11 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
+    %15 = arith.addi %13, %11 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
     %16 = tt.expand_dims %7 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc10)
-    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc10)
+    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc10)
     %18 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked> loc(#loc11)
     %19 = arith.muli %16, %18 : tensor<128x1xi32, #blocked> loc(#loc11)
     %20 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>, #blocked> loc(#loc12)
@@ -50,13 +49,13 @@
     %33 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc17)
     %34 = tt.addptr %33, %32 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc17)
     %35 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc18)
-    %36 = tt.expand_dims %15 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc18)
+    %36 = tt.expand_dims %15 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc18)
     %37 = tt.broadcast %34 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc19)
     %38 = tt.broadcast %35 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
     %39 = tt.addptr %37, %38 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc19)
     %40 = arith.addi %arg5, %c63_i32 : i32 loc(#loc43)
     %41 = arith.divsi %40, %c64_i32 : i32 loc(#loc44)
-    %42 = scf.for %arg9 = %c0_i32 to %41 step %c1_i32 iter_args(%arg10 = %cst_1) -> (tensor<128x64xf32, #blocked1>)  : i32 {
+    %42 = scf.for %arg9 = %c0_i32 to %41 step %c1_i32 iter_args(%arg10 = %cst_1) -> (tensor<128x64xf32, #mma>)  : i32 {
       %58 = arith.muli %arg9, %c64_i32 : i32 loc(#loc24)
       %59 = arith.subi %arg5, %58 : i32 loc(#loc25)
       %60 = tt.splat %59 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
@@ -72,31 +71,27 @@
       %70 = tt.addptr %39, %69 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
       %71 = tt.broadcast %67 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc32)
       %72 = tt.load %70, %71, %cst : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc32)
-      %73 = ttg.convert_layout %65 : tensor<128x64xbf16, #blocked> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked1}>> loc(#loc28)
-      %74 = ttg.convert_layout %72 : tensor<64x64xbf16, #blocked> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked1}>> loc(#loc32)
-      %75 = ttg.convert_layout %arg10 : tensor<128x64xf32, #blocked1> -> tensor<128x64xf32, #mma> loc(#loc1)
-      %76 = ttg.convert_layout %73 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked1}>> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc28)
-      %77 = ttg.convert_layout %74 : tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked1}>> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc32)
-      %78 = tt.dot %76, %77, %75, inputPrecision = tf32 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<128x64xf32, #mma> loc(#loc33)
-      %79 = ttg.convert_layout %78 : tensor<128x64xf32, #mma> -> tensor<128x64xf32, #blocked1> loc(#loc33)
-      scf.yield %79 : tensor<128x64xf32, #blocked1> loc(#loc34)
+      %73 = ttg.convert_layout %65 : tensor<128x64xbf16, #blocked> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc28)
+      %74 = ttg.convert_layout %72 : tensor<64x64xbf16, #blocked> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc32)
+      %75 = tt.dot %73, %74, %arg10, inputPrecision = tf32 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<128x64xf32, #mma> loc(#loc33)
+      scf.yield %75 : tensor<128x64xf32, #mma> loc(#loc34)
     } loc(#loc23)
-    %43 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc35)
-    %44 = arith.muli %17, %43 : tensor<128x1xi32, #blocked2> loc(#loc35)
-    %45 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc36)
-    %46 = tt.addptr %45, %44 : tensor<128x1x!tt.ptr<f32>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc36)
-    %47 = tt.broadcast %46 : tensor<128x1x!tt.ptr<f32>, #blocked2> -> tensor<128x64x!tt.ptr<f32>, #blocked2> loc(#loc37)
-    %48 = tt.broadcast %36 : tensor<1x64xi32, #blocked2> -> tensor<128x64xi32, #blocked2> loc(#loc37)
-    %49 = tt.addptr %47, %48 : tensor<128x64x!tt.ptr<f32>, #blocked2>, tensor<128x64xi32, #blocked2> loc(#loc37)
-    %50 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc38)
-    %51 = arith.cmpi slt, %17, %50 : tensor<128x1xi32, #blocked2> loc(#loc38)
-    %52 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked2> loc(#loc39)
-    %53 = arith.cmpi slt, %36, %52 : tensor<1x64xi32, #blocked2> loc(#loc39)
-    %54 = tt.broadcast %51 : tensor<128x1xi1, #blocked2> -> tensor<128x64xi1, #blocked2> loc(#loc40)
-    %55 = tt.broadcast %53 : tensor<1x64xi1, #blocked2> -> tensor<128x64xi1, #blocked2> loc(#loc40)
-    %56 = arith.andi %54, %55 : tensor<128x64xi1, #blocked2> loc(#loc40)
-    %57 = ttg.convert_layout %42 : tensor<128x64xf32, #blocked1> -> tensor<128x64xf32, #blocked2> loc(#loc41)
-    tt.store %49, %57, %56 : tensor<128x64x!tt.ptr<f32>, #blocked2> loc(#loc41)
+    %43 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc35)
+    %44 = arith.muli %17, %43 : tensor<128x1xi32, #blocked1> loc(#loc35)
+    %45 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
+    %46 = tt.addptr %45, %44 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc36)
+    %47 = tt.broadcast %46 : tensor<128x1x!tt.ptr<f32>, #blocked1> -> tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc37)
+    %48 = tt.broadcast %36 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc37)
+    %49 = tt.addptr %47, %48 : tensor<128x64x!tt.ptr<f32>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc37)
+    %50 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc38)
+    %51 = arith.cmpi slt, %17, %50 : tensor<128x1xi32, #blocked1> loc(#loc38)
+    %52 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc39)
+    %53 = arith.cmpi slt, %36, %52 : tensor<1x64xi32, #blocked1> loc(#loc39)
+    %54 = tt.broadcast %51 : tensor<128x1xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc40)
+    %55 = tt.broadcast %53 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc40)
+    %56 = arith.andi %54, %55 : tensor<128x64xi1, #blocked1> loc(#loc40)
+    %57 = ttg.convert_layout %42 : tensor<128x64xf32, #mma> -> tensor<128x64xf32, #blocked1> loc(#loc41)
+    tt.store %49, %57, %56 : tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc41)
     tt.return loc(#loc42)
   } loc(#loc)
 } loc(#loc)
