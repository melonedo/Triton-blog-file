// Next run Pass --tritongpu-combine-tensor-select-and-if
// IR Dump After TritonNvidiaGPUMMALoweringPass ('builtin.module' operation)
// Current Run Pass --triton-nvidia-mma-lowering

#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matrix_multiplication_kernel(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":6:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xbf16, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xbf16, #blocked> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<128x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %1, %c128_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.splat %2 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %6 = tt.splat %2 : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %7 = arith.addi %5, %3 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %8 = arith.addi %6, %4 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %9 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc8)
    %11 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %12 = tt.splat %9 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.splat %9 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %14 = arith.addi %12, %10 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %15 = arith.addi %13, %11 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %16 = tt.expand_dims %7 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc10)
    %18 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked> loc(#loc11)
    %19 = arith.muli %16, %18 : tensor<128x1xi32, #blocked> loc(#loc11)
    %20 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %19 : tensor<128x1x!tt.ptr<bf16>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc12)
    %22 = tt.expand_dims %10 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc13)
    %23 = tt.broadcast %21 : tensor<128x1x!tt.ptr<bf16>, #blocked> -> tensor<128x64x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %24 = tt.broadcast %22 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc14)
    %25 = tt.addptr %23, %24 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc14)
    %26 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc15)
    %28 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc16)
    %29 = arith.muli %27, %28 : tensor<64x1xi32, #blocked> loc(#loc16)
    %30 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %31 = tt.addptr %30, %29 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc17)
    %32 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc18)
    %33 = tt.expand_dims %15 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc18)
    %34 = tt.broadcast %31 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %35 = tt.broadcast %32 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
    %36 = tt.addptr %34, %35 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc19)
    %37 = arith.addi %arg5, %c63_i32 : i32 loc(#loc42)
    %38 = arith.divsi %37, %c64_i32 : i32 loc(#loc43)
    %39 = ttg.local_alloc : () -> !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(#loc23)
    %40 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc24)
    %41 = arith.cmpi sgt, %38, %c0_i32 : i32 loc(#loc25)
    %42 = tt.splat %arg5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
    %43 = arith.cmpi slt, %22, %42 : tensor<1x64xi32, #blocked> loc(#loc26)
    %44 = tt.broadcast %43 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
    %45 = ttg.memdesc_subview %39[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
    %46 = tt.splat %41 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
    %47 = arith.andi %46, %44 : tensor<128x64xi1, #blocked> loc(#loc25)
    %48 = ttg.async_copy_global_to_local %25, %45 mask %47 other %cst_0 : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
    %49 = ttg.async_commit_group %48 loc(#loc23)
    %50 = tt.splat %arg5 : i32 -> tensor<64x1xi32, #blocked> loc(#loc27)
    %51 = arith.cmpi slt, %27, %50 : tensor<64x1xi32, #blocked> loc(#loc27)
    %52 = tt.broadcast %51 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
    %53 = ttg.memdesc_subview %40[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
    %54 = tt.splat %41 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
    %55 = arith.andi %54, %52 : tensor<64x64xi1, #blocked> loc(#loc25)
    %56 = ttg.async_copy_global_to_local %36, %53 mask %55 other %cst_1 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
    %57 = ttg.async_commit_group %56 loc(#loc24)
    %58 = arith.cmpi sgt, %38, %c1_i32 : i32 loc(#loc25)
    %59 = arith.subi %arg5, %c64_i32 : i32 loc(#loc28)
    %60 = tt.splat %59 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
    %61 = arith.cmpi slt, %22, %60 : tensor<1x64xi32, #blocked> loc(#loc26)
    %62 = tt.addptr %25, %cst_2 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc29)
    %63 = tt.broadcast %61 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
    %64 = ttg.memdesc_subview %39[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
    %65 = tt.splat %58 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
    %66 = arith.andi %65, %63 : tensor<128x64xi1, #blocked> loc(#loc25)
    %67 = ttg.async_copy_global_to_local %62, %64 mask %66 other %cst_0 : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
    %68 = ttg.async_commit_group %67 loc(#loc23)
    %69 = tt.splat %59 : i32 -> tensor<64x1xi32, #blocked> loc(#loc27)
    %70 = arith.cmpi slt, %27, %69 : tensor<64x1xi32, #blocked> loc(#loc27)
    %71 = arith.muli %arg7, %c64_i32 : i32 loc(#loc30)
    %72 = tt.splat %71 : i32 -> tensor<64x64xi32, #blocked> loc(#loc31)
    %73 = tt.addptr %36, %72 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
    %74 = tt.broadcast %70 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
    %75 = ttg.memdesc_subview %40[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
    %76 = tt.splat %58 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
    %77 = arith.andi %76, %74 : tensor<64x64xi1, #blocked> loc(#loc25)
    %78 = ttg.async_copy_global_to_local %73, %75 mask %77 other %cst_1 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
    %79 = ttg.async_commit_group %78 loc(#loc24)
    %80:7 = scf.for %arg9 = %c0_i32 to %38 step %c1_i32 iter_args(%arg10 = %cst, %arg11 = %c1_i32, %arg12 = %c-1_i32, %arg13 = %49, %arg14 = %68, %arg15 = %57, %arg16 = %79) -> (tensor<128x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %97 = arith.subi %38, %c2_i32 : i32 loc(#loc25)
      %98 = arith.cmpi slt, %arg9, %97 : i32 loc(#loc25)
      %99 = arith.addi %arg12, %c1_i32 : i32 loc(#loc25)
      %100 = arith.cmpi sge, %99, %c2_i32 : i32 loc(#loc25)
      %101 = arith.select %100, %c0_i32, %99 : i32 loc(#loc25)
      %102 = ttg.async_wait %arg13, %arg15 {num = 2 : i32} loc(#loc23)
      %103 = ttg.memdesc_subview %39[%101, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
      %104 = ttg.local_load %103 token %102 : !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> -> tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc23)
      %105 = ttg.memdesc_subview %40[%101, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
      %106 = ttg.local_load %105 token %102 : !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc24)
      %107 = tt.dot %104, %106, %arg10, inputPrecision = tf32 : tensor<128x64xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<128x64xf32, #mma> loc(#loc32)
      %108 = arith.addi %arg11, %c1_i32 : i32 loc(#loc25)
      %109 = arith.cmpi sge, %108, %c2_i32 : i32 loc(#loc25)
      %110 = arith.select %109, %c0_i32, %108 : i32 loc(#loc25)
      %111 = arith.addi %arg9, %c2_i32 : i32 loc(#loc25)
      %112 = arith.muli %111, %c64_i32 : i32 loc(#loc33)
      %113 = arith.subi %arg5, %112 : i32 loc(#loc28)
      %114 = tt.splat %113 : i32 -> tensor<1x64xi32, #blocked> loc(#loc26)
      %115 = arith.cmpi slt, %22, %114 : tensor<1x64xi32, #blocked> loc(#loc26)
      %116 = tt.splat %112 : i32 -> tensor<128x64xi32, #blocked> loc(#loc29)
      %117 = tt.addptr %25, %116 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc29)
      %118 = tt.broadcast %115 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc23)
      %119 = ttg.memdesc_subview %39[%110, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
      %120 = tt.splat %98 : i1 -> tensor<128x64xi1, #blocked> loc(#loc25)
      %121 = arith.andi %120, %118 : tensor<128x64xi1, #blocked> loc(#loc25)
      %122 = ttg.async_copy_global_to_local %117, %119 mask %121 other %cst_0 : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared, #smem, mutable, 2x128x64> loc(#loc23)
      %123 = ttg.async_commit_group %122 loc(#loc23)
      %124 = tt.splat %113 : i32 -> tensor<64x1xi32, #blocked> loc(#loc27)
      %125 = arith.cmpi slt, %27, %124 : tensor<64x1xi32, #blocked> loc(#loc27)
      %126 = arith.muli %112, %arg7 : i32 loc(#loc30)
      %127 = tt.splat %126 : i32 -> tensor<64x64xi32, #blocked> loc(#loc31)
      %128 = tt.addptr %36, %127 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
      %129 = tt.broadcast %125 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc24)
      %130 = ttg.memdesc_subview %40[%110, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
      %131 = tt.splat %98 : i1 -> tensor<64x64xi1, #blocked> loc(#loc25)
      %132 = arith.andi %131, %129 : tensor<64x64xi1, #blocked> loc(#loc25)
      %133 = ttg.async_copy_global_to_local %128, %130 mask %132 other %cst_1 : tensor<64x64x!tt.ptr<bf16>, #blocked> -> <64x64xbf16, #shared, #smem, mutable, 2x64x64> loc(#loc24)
      %134 = ttg.async_commit_group %133 loc(#loc24)
      scf.yield %107, %110, %101, %arg14, %123, %arg16, %134 : tensor<128x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc25)
    } loc(#loc25)
    %81 = ttg.async_wait  {num = 0 : i32} loc(#loc25)
    ttg.local_dealloc %40 : !ttg.memdesc<2x64x64xbf16, #shared, #smem, mutable> loc(#loc25)
    ttg.local_dealloc %39 : !ttg.memdesc<2x128x64xbf16, #shared, #smem, mutable> loc(#loc25)
    %82 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc34)
    %83 = arith.muli %17, %82 : tensor<128x1xi32, #blocked1> loc(#loc34)
    %84 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %85 = tt.addptr %84, %83 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc35)
    %86 = tt.broadcast %85 : tensor<128x1x!tt.ptr<f32>, #blocked1> -> tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %87 = tt.broadcast %33 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc36)
    %88 = tt.addptr %86, %87 : tensor<128x64x!tt.ptr<f32>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc36)
    %89 = tt.splat %arg3 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc37)
    %90 = arith.cmpi slt, %17, %89 : tensor<128x1xi32, #blocked1> loc(#loc37)
    %91 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %92 = arith.cmpi slt, %33, %91 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %93 = tt.broadcast %90 : tensor<128x1xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc39)
    %94 = tt.broadcast %92 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc39)
    %95 = arith.andi %93, %94 : tensor<128x64xi1, #blocked1> loc(#loc39)
    %96 = ttg.convert_layout %80#0 : tensor<128x64xf32, #mma> -> tensor<128x64xf32, #blocked1> loc(#loc40)
    tt.store %88, %96, %95 : tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":18:26)
#loc3 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":19:26)
#loc4 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":21:21)
#loc5 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":21:49)
#loc6 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":21:36)
#loc7 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":22:21)
#loc8 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":22:49)
#loc9 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":22:36)
#loc10 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":26:28)
#loc11 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":26:39)
#loc12 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":26:21)
#loc13 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":26:58)
#loc14 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":26:51)
#loc15 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":27:28)
#loc16 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":27:39)
#loc17 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":27:21)
#loc18 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":27:58)
#loc19 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":27:51)
#loc20 = loc("/workspace/Triton-blog-file/.venv/lib/python3.10/site-packages/triton/language/standard.py":40:22)
#loc21 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":32:33)
#loc22 = loc("/workspace/Triton-blog-file/.venv/lib/python3.10/site-packages/triton/language/standard.py":40:28)
#loc23 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":35:20)
#loc24 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:20)
#loc25 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":32:22)
#loc26 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":35:82)
#loc27 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:82)
#loc28 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":33:22)
#loc29 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":35:29)
#loc30 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:48)
#loc31 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":36:29)
#loc32 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":38:33)
#loc33 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":33:26)
#loc34 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:39)
#loc35 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:21)
#loc36 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":41:51)
#loc37 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:33)
#loc38 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:58)
#loc39 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":44:39)
#loc40 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:21)
#loc41 = loc("/workspace/Triton-blog-file/matmul/kernel/matmul-with-dot-bf16.py":45:4)
#loc42 = loc(callsite(#loc20 at #loc21))
#loc43 = loc(callsite(#loc22 at #loc21))
